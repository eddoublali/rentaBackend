// Génère le client Prisma pour interagir avec la base de données 
generator client {
  provider = "prisma-client-js"
}

// Configuration de la source de données (base de données MySQL)
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Utilisateurs de l'application
model User {
  id       Int    @id @default(autoincrement())
  name     String // Nom de l'utilisateur
  email    String @unique // Email unique
  password String // Mot de passe
  role     Role   @default(ADMIN) // Rôle de l'utilisateur
  resetToken      String?   // Password reset token, nullable
  resetTokenExpiry DateTime? // Token expiry time, nullable

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Rôles disponibles dans le système
enum Role {
  ADMIN // Administrateur principal du système
  ACCOUNTANT // Responsable de la comptabilité
  ADMINISTRATEUR // Autre administrateur avec des permissions spécifiques
}

// Informations sur les clients
model Client {
  id                 Int         @id @default(autoincrement())
  name               String // Nom complet ou nom de l'entreprise
  Lastname           String
  phone              String // Numéro de téléphone
  email              String      @unique // Email
  gender             Gender      @default(Male)
  cin                String // Numéro de carte d'identité
  cinExpiry          DateTime? // Date d'expiration de la carte d'identité
  license            String // Permis de conduire ou licence d'entreprise
  licenseExpiry      DateTime? // Date d'expiration du permis de conduire ou
  address            String // Adresse
  blacklisted        Boolean     @default(false) // Liste noire ?
  nationality        Nationality @default(Moroccan) // Nationalité
  passportNumber     String? // Numéro de passeport
  passportExpiry     DateTime? // Expiration du passeport
  birthDate          DateTime? // Date de naissance (optional for enterprises)
  companyName        String? // Nom de l'entreprise (si applicable)
  registrationNumber String? // Numéro d'enregistrement de l'entreprise (si applicable)
  clientType         ClientType  @default(PERSONAL) // Type de client
  cinimage           String // Image de la carte d'identité
  licenseimage       String // Image du permis de conduire

  // Relations
  reservations          Reservation[] // Réservations faites en tant que client principal
  secondaryReservations Contract[]    @relation("SecondaryClient") // Réservations en tant que second conducteur
  contracts             Contract[] // Contrats associés au client
  invoices              Invoice[] // Factures associées au client
  revenues              Revenue[] // Revenus générés par le client
  infractions           Infraction[]
  accidents             Accident[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ClientType {
  PERSONAL // Client individuel
  ENTERPRISE // Client entreprise
}

enum Nationality {
  Moroccan
  Algerian
  Tunisian
  French
  Spanish
  Italian
  German
  American
  British
  Canadian
}

enum Gender {
  Male
  Female
}

// Informations sur les véhicules
model Vehicle {
  id               Int           @id @default(autoincrement())
  brand            Brand // Marque
  model            String // Modèle
  category         Category // Catégorie
  plateNumber      String        @unique // Numéro d'immatriculation
  chassisNumber    String        @unique // Numéro de châssis
  year             Int // Année de fabrication
  color            Color // Couleur
  doors            Int // Nombre de portes
  fuelType         FuelType // Type de carburant
  gearbox          Gearbox // Boîte de vitesse
  mileage          Int // Kilométrage
  status           VehicleStatus @default(AVAILABLE) // Statut
  dailyPrice       Float // Prix journalier
  image            String? // Image du véhicule
  oilChange        DateTime? // Date du dernier vidange
  timingBelt       DateTime? // Courroie de distribution
  purchaseDate     DateTime? // Date d'achat
  purchasePrice    Float? // Prix d'achat
  advancePayment   Float? // Acompte
  remainingMonths  Int? // Mois restants
  monthlyPayment   Float? // Paiement mensuel
  paymentDay       Int? // Jour de paiement
  registrationCard String? // Carte grise image 
  insurance        String? // Assurance image
  technicalVisit   String? // Visite technique image
  authorization    String? // Autorisation image
  taxSticker       String? // Vignette image

  // Relations
  reservations Reservation[] // Réservations liées
  contracts    Contract[] // Contrats liés
  infractions  Infraction[] // Infractions liées
  revenues     Revenue[] // Revenus générés par le véhicule
  accidents    Accident[]
  expense      Expense[]
  maintenance  Maintenance[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Statut du véhicule
enum VehicleStatus {
  AVAILABLE // Disponible
  RENTED // Loué
  MAINTENANCE // En maintenance
}

enum FuelType {
  GASOLINE
  DIESEL
  ELECTRIC
  HYBRID
}

enum Brand {
  TOYOTA
  HONDA
  FORD
  MERCEDES
  BMW
  AUDI
  VOLKSWAGEN
  HYUNDAI
  KIA
  NISSAN
  PEUGEOT
  RENAULT
  FIAT
  VOLVO
  MAZDA
  JEEP
  TESLA
  SUZUKI
  SKODA
}

enum Color {
  BLACK
  WHITE
  GREY
  BLUE
  RED
  GREEN
  YELLOW
  GOLD
}

enum Category {
  CITADINE
  BERLINE
  SUV
  UTILITAIRE
}

enum Gearbox {
  MANUAL
  AUTOMATIC
}

model Reservation {
  id          Int               @id @default(autoincrement())
  vehicleId   Int
  vehicle     Vehicle           @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  clientId    Int
  client      Client            @relation(fields: [clientId], references: [id], onDelete: Cascade)
  startDate   DateTime // Date de début
  endDate     DateTime // Date de fin
  dailyPrice  Float // Prix journalier
  totalAmount Float
  status      ReservationStatus @default(PENDING) // Statut

  contracts Contract[]

  invoices Invoice[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Contract
model Contract {
  id            Int         @id @default(autoincrement())
  reservationId Int
  reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)

  vehicleId        Int
  vehicle          Vehicle       @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  clientId         Int
  client           Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  startDate        DateTime // Date de début
  endDate          DateTime // Date de fin
  deliveryDate     DateTime
  returnDate       DateTime
  totalAmount      Float // Montant total 
  dailyPrice       Float
  deliveryLocation String // Lieu de livraison
  returnLocation   String // Lieu de retour
  additionalCharge Float? // Frais supplémentaires
  fuelLevel        Int // Niveau de carburant
  departureKm      Int // Kilométrage de départ
  secondDriver     Boolean       @default(false) // Deuxième conducteur
  clientSeconId    Int?
  secondClient     Client?       @relation("SecondaryClient", fields: [clientSeconId], references: [id], onDelete: Cascade)
  Expirydate       String? // Date d'expiration cheque
  paymentMethod    PaymentMethod
  note             String?       @db.Text
  accessories      Json? // Changed from String[] to Json?
  documents        Json? // Changed from String[] to Json?
  // Relations
  revenues         Revenue[] // Revenus générés par le reservation

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Statut d'une réservation
enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELED
}

enum PaymentMethod {
  CASH
  CHECK
  TRANSFER
}

// Factures
model Invoice {
  id            Int         @id @default(autoincrement())
  reservationId Int
  reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  clientId      Int
  client        Client      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  amount        Float // Montant de la facture
  dueDate       DateTime // Date d'échéance
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

// Infractions liées aux véhicules
model Infraction {
  id             Int              @id @default(autoincrement())
  clientId       Int
  client         Client           @relation(fields: [clientId], references: [id], onDelete: Cascade)
  vehicleId      Int
  vehicle        Vehicle          @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  infractionType String // Type d'infraction
  fineAmount     Float // Montant de l'amende
  infractionDate DateTime // Date de l'infraction
  status         InfractionStatus @default(PENDING)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

// Statut des infractions
enum InfractionStatus {
  PENDING
  PAID
  UNPAID
}

// Revenus générés par l'entreprise
model Revenue {
  id         Int      @id @default(autoincrement())
  clientId   Int
  client     Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  contractId Int
  contract   Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  vehicleId  Int
  vehicle    Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  amount     Float // Montant du revenu
  source     String // Source du revenu (réservation)
  date       DateTime // Date du revenu
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// Dépenses effectuées par l'entreprise
model Expense {
  id        Int      @id @default(autoincrement())
  vehicleId Int
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  title     String // Titre ou description de la charge
  amount    Float // Montant de la charge
  category  String // Catégorie (e.g. entretien, assurance, carburant)
  date      DateTime // Date de la charge
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Maintenance {
  id             Int               @id @default(autoincrement())
  vehicleId      Int
  vehicle        Vehicle           @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  currentMileage Int? // Current Mileage
  nextOilChange  Int? // Next Oil Change
  status         StatusMaintenance // Status
  amount         Float // Montant de la charge
  maintenance    MaintenanceType // Catégorie (e.g. entretien, assurance, carburant)
  date           DateTime // Date de la charge
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
}

enum MaintenanceType {
  OIL_CHANGE // Vidange d'huile
  TIMING_CHAIN // Chaîne de distribution
  WASHING
  BRAKE_CHANGE // Changement de freins
  BATTERY_CHECK // Vérification batterie
  GENERAL_SERVICE // Entretien général
  OTHER // Autre
}

enum StatusMaintenance {
  PENDING
  COMPLETED // Repair has been completed
}

model Accident {
  id        Int     @id @default(autoincrement())
  vehicleId Int
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  clientId Int? // En cas d'accident causé par un client identifiable
  client   Client? @relation(fields: [clientId], references: [id], onDelete: SetNull)

  accidentDate DateTime // Date de l'accident
  location     String // Lieu de l'accident
  description  String?        @db.Text // Description libre
  repairCost   Float? // Coût estimé ou réel des réparations
  fault        FaultType      @default(UNKNOWN) // Responsabilité
  damagePhotos String? // Liste d'images (chemins ou URLs)
  status       AccidentStatus @default(REPORTED)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum FaultType {
  CLIENT // Le client est responsable
  THIRD_PARTY // Un tiers est responsable
  UNKNOWN // Responsabilité non déterminée
}

enum AccidentStatus {
  REPORTED // Signalé
  IN_PROGRESS // En traitement
  REPAIRED // Réparé
  CLOSED // Dossier clos
}


// Agency profile information (singleton - only one record)
model Agency {
  id                Int      @id @default(1) // Always ID 1 as we only want one record
  name              String   // Agency name
  logo              String?  // Path to logo image
  address           String   // Physical address
  city              String
  country           String   @default("Morocco")
  postalCode        String?
  phone             String
  email             String
  website           String?
  
  // Moroccan business identifiers
  rc                String?  // Registre de Commerce (R.C.)
  patente           String?  // Patente number
  if                String?  // Identifiant Fiscal (IF)
  cnss              String?  // Caisse Nationale de Sécurité Sociale (CNSS)
  ice               String?  // Identifiant Commun de l'Entreprise (ICE)
  
  // Banking information
  bankName          String?  // Bank name
  bankAccount       String?  // Account number
  rib               String?  // Relevé d'Identité Bancaire (RIB)
  iban              String?  // International Bank Account Number
  swift             String?  // SWIFT/BIC code
  
  
 

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
 
  
 
  
  @@map("agency")
}